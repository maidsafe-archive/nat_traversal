initSidebarItems({"enum":[["Option","The `Option` type. See the module level documentation for more."],["Result","`Result` is a type that represents either success (`Ok`) or failure (`Err`)."]],"fn":[["drop","Disposes of a value."]],"trait":[["AsMut","A cheap, mutable reference-to-mutable reference conversion."],["AsRef","A cheap, reference-to-reference conversion."],["Clone","A common trait for cloning an object."],["Copy","Types that can be copied by simply copying bits (i.e. `memcpy`)."],["Default","A trait for giving a type a useful default value."],["DoubleEndedIterator","An iterator able to yield elements from both ends."],["Drop","The `Drop` trait is used to run some code when a value goes out of scope. This is sometimes called a 'destructor'."],["Eq","Trait for equality comparisons which are equivalence relations."],["ExactSizeIterator","An iterator that knows its exact length."],["Extend","Extend a collection with the contents of an iterator."],["Fn","A version of the call operator that takes an immutable receiver."],["FnMut","A version of the call operator that takes a mutable receiver."],["FnOnce","A version of the call operator that takes a by-value receiver."],["From","Construct `Self` via a conversion."],["Into","A conversion that consumes `self`, which may or may not be expensive."],["IntoIterator","Conversion into an `Iterator`."],["Iterator","An interface for dealing with iterators."],["Ord","Trait for types that form a total order."],["PartialEq","Trait for equality comparisons which are partial equivalence relations."],["PartialOrd","Trait for values that can be compared for a sort-order."],["Send","Types that can be transferred across thread boundaries."],["Sized","Types with a constant size known at compile-time."],["SliceExt","Extension methods for slices."],["Sync","Types that can be safely shared between threads when aliased."]]});