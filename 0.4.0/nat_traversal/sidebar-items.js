initSidebarItems({"enum":[["MappedTcpSocketMapError","Errors returned by MappedTcpSocket::map"],["MappedTcpSocketMapWarning","Warnings raised by MappedTcpSocket::map"],["MappedTcpSocketNewError","Errors returned by MappedTcpSocket::new"],["MappedUdpSocketMapError","Errors returned by MappedUdpSocket::map"],["MappedUdpSocketMapWarning","Warnings raised by MappedUdpSocket::map"],["MappedUdpSocketNewError","Errors returned by MappedUdpSocket::new"],["MappingContextNewError",""],["MappingContextNewWarning",""],["NewReusablyBoundTcpSocketError","Errors returned by new_reusably_bound_tcp_socket"],["SimpleTcpHolePunchServerNewError","Errors returned by SimpleTcpHolePunchServer::new"],["SimpleUdpHolePunchServerNewError","Errors returned by SimpleUdpHolePunchServer::new"],["TcpPunchHoleError",""],["TcpPunchHoleWarning",""]],"fn":[["filter_udp_hole_punch_packet","Returns `None` if `data` looks like a hole punching message. Otherwise returns the data it was given."],["gen_rendezvous_info","Create a `(PrivRendezvousInfo, PubRendezvousInfo)` pair from a list of mapped socket addresses."],["new_reusably_bound_tcp_socket",""],["tcp_punch_hole","Perform a tcp rendezvous connect. `socket` should have been obtained from a `MappedTcpSocket`."]],"struct":[["MappedSocketAddr","A socket address obtained through some mapping technique."],["MappedTcpSocket","A tcp socket for which we know our external endpoints."],["MappedUdpSocket","A bound udp socket for which we know our external endpoints."],["MappingContext","You need to create a `MappingContext` before doing any socket mapping. This `MappingContext` should ideally be kept throughout the lifetime of the program. Internally it caches a addresses of UPnP servers and hole punching servers."],["PrivRendezvousInfo","The local half of a `PubRendezvousInfo`."],["PubRendezvousInfo","Info exchanged by both parties before performing a rendezvous connection."],["PunchedUdpSocket","A udp socket that has been hole punched."],["SimpleTcpHolePunchServer","RAII type for a hole punch server which speaks the simple hole punching protocol."],["SimpleUdpHolePunchServer","RAII type for a hole punch server which speaks the simple hole punching protocol."]]});